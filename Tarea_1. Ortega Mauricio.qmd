---
title: "Tarea 1. Soluciones de ecuaciones"
author: "Amado Mauricio Ortega Sanchez"
format: html
editor: visual
lang: es
---

Para las funciones de los ejercicios 1-6 realiza lo siguiente:

a)  Gráfica de la función en el intervalo en caso que se indique.

b)  Aproximación de la raíz o raíces por medio de los métodos de bisección, Newton-Raphson y la secante.

c)  Compara los resultados.

```{python}
import matplotlib.pyplot as plt
import numpy as np
from scipy import optimize
import math
```

::: {#exr-tarea1_1}
Un polinomio cuadrático de la forma $f(x)=ax^2+bx+c$ con dos raíces reales distintas.

Consideremos $f(x)=x^2+22x+117$

Grafica

```{python}
f = lambda x:  x ** 2+25*x+156

x = np.linspace(-13, -12, 500)
y = x ** 2+25*x+156

# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x,y, color ="red") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $f(x)=x^2+25x+156$", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Metodo biseccion primera raiz

```{python}
raiz_1, info_biseccion1 = optimize.bisect(f, -13, -12, full_output=True)

print("informacion convergencia metodo de biseccion primera raiz")
print(info_biseccion1)
print("---------")

print(f"La primera raiz es{raiz_1}")
```

Metodo Newton Raphson

```{python}
der_f = lambda x: 2* x **2 + 25*x +156

raiz_1newton, info_newton1 = optimize.bisect(f,-13, -12, full_output=True)
print("información convergencia método de Newton primera raiz")
print(info_newton1)
print("-----------------")
print(f"La primera raiz es {raiz_1newton}")
```

Metodo secante primera raiz

```{python}
raiz_1secante, info_secante1 = optimize.newton(f, x0= -13, x1= -12, full_output= True)

print(" Información convergencia método de la secante primera raiz")
print(info_secante1)
print("-------------")
print(f"La primera raiz es {raiz_1secante}")
```

Metodo bisección segunda raiz

```{python}
raiz_2, info_biseccion2 = optimize.bisect(f, -10, -8, full_output=True)

print("informacion convergencia metodo de biseccion segunda raiz")
print(info_biseccion2)
print("---------")

print(f"La primera raiz es{raiz_2}")
```

Metodo de Newton Raphson segunda raiz

```{python}
der_f = lambda x: 2* x **2 + 25*x +156

raiz_2newton, info_newton2 = optimize.bisect(f,-10, -8, full_output=True)
print("información convergencia método de Newton segunda raiz")
print(info_newton2)
print("-----------------")
print(f"La segunda raiz es {raiz_2newton}")
```

Metodo de la secante segunda raiz

```{python}
raiz_2secante, info_secante2 = optimize.newton(f, x0= -10, x1= -8, full_output= True)

print(" Información convergencia método de la secante segunda raiz")
print(info_secante2)
print("-------------")
print(f"La primera raiz es {raiz_2secante}")
```
:::

::: {#exr-tarea1_2}
Un polinomio cúbico de la forma $f(x)=ax^3+bx^2+cx+d$ con tres raíces reales distintas.

Consideremos $f(x)=x^3+15x^2+77x+105$

Grafica

```{python}


f = lambda x:  x ** 3+15*x ** 2+77*x+105

x = np.linspace(-3, -5, 500)
y = x ** 3+15*x ** 2+77*x+105

# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x,y, color ="red") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $f(x)=x^3+21x^2+131x+231$", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Metodo biseccion primera raiz

```{python}
raiz_1, info_biseccion1 = optimize.bisect(f, -13, -12, full_output=True)

print("informacion convergencia metodo de biseccion primera raiz")
print(info_biseccion1)
print("---------")

print(f"La primera raiz es{raiz_1}")

```

Metodo Newton Raphson primera raiz

```{python}
der_f = lambda x: 3* x **2 + 25*x +156

raiz_1newton, info_newton1 = optimize.bisect(f,-13, -12, full_output=True)
print("información convergencia método de Newton primera raiz")
print(info_newton1)
print("-----------------")
print(f"La primera raiz es {raiz_1newton}")
```

Metodo secante primera raiz

```{python}
raiz_1secante, info_secante1 = optimize.newton(f, x0= -13, x1= -12, full_output= True)

print(" Información convergencia método de la secante primera raiz")
print(info_secante1)
print("-------------")
print(f"La primera raiz es {raiz_1secante}")
```

Metodo biseccion segunda raiz

```{python}
raiz_2, info_biseccion2 = optimize.bisect(f, -8, -6, full_output=True)

print("informacion convergencia metodo de biseccion segunda raiz")
print(info_biseccion2)
print("---------")

print(f"La segunda raiz  es{raiz_2}")
```

Método Newton Raphson segunda raiz

```{python}
der_f = lambda x: 3* x **2 + 25*x +156

raiz_2newton, info_newton2 = optimize.bisect(f,-8, -6, full_output=True)
print("información convergencia método de Newton segunda raiz")
print(info_newton2)
print("-----------------")
print(f"La segunda raiz es {raiz_2newton}")
```

Método secante segunda raiz

```{python}
raiz_2secante, info_secante2 = optimize.newton(f, x0= -8, x1= -6, full_output= True)

print(" Información convergencia método de la secante segunda raiz")
print(info_secante2)
print("-------------")
print(f"La segunda raiz es {raiz_2secante}")
```

Método bisección tercera raiz

```{python}
raiz_3, info_biseccion3 = optimize.bisect(f, -4, -2, full_output=True)

print("informacion convergencia metodo de biseccion tercera raiz")
print(info_biseccion3)
print("---------")

print(f"La segunda raiz  es{raiz_3}")
```

Método Newton Raphson tercera raiz

```{python}
der_f = lambda x: 3* x **2 + 25*x +156

raiz_3newton, info_newton3 = optimize.bisect(f,-4, -2, full_output=True)
print("información convergencia método de Newton tercera raiz")
print(info_newton3)
print("-----------------")
print(f"La segunda raiz es {raiz_3newton}")
```

Método de la secante tercera raiz

```{python}
raiz_3secante, info_secante3 = optimize.newton(f, x0= -4, x1= -2, full_output= True)

print(" Información convergencia método de la secante tercera raiz")
print(info_secante3)
print("-------------")
print(f"La tercera raiz es {raiz_3secante}")
```
:::

::: {#exr-tarea1_3}
$f(x)= x^2 -2xe^{-x}+e^{-2x}$, para $0\leq x \leq 1$

```{python}
f = lambda x:  x ** 2-2*x *np.exp(-x) + np.exp(-2*x)

x = np.linspace(0, 1, 400)
y = x ** 2-2*x *np.exp(-x) + np.exp(-2*x)

# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x,y, color ="blue") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $f(x)=x^2-2xe^{-x} + e^{-2x} $", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Metodo biseccion primera raiz

```{python}
raiz_1, info_biseccion1 = optimize.bisect(f, 0, 1, full_output=True)

print("informacion convergencia metodo de biseccion primera raiz")
print(info_biseccion1)
print("---------")

print(f"La primera raiz es{raiz_1}")

print(f"f(0) = {f(0)}")
print (f"f(1) = {f(1)}")
```

Metodo Newton Raphson

```{python}
der_f = lambda x: 2* x - 2*np.exp(-x) + 2*x*np.exp(-x) - 2*np.exp(-2*x)

root_newton, info_newton = optimize.newton(f, 1, der_f, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Metodo secante

```{python}
raiz_1secante, info_secante1 = optimize.newton(f, x0= 0, x1= 1, full_output= True)

print(" Información convergencia método de la secante primera raiz")
print(info_secante1)
print("-------------")
print(f"La primera raiz es {raiz_1secante}")
```
:::

::::::::: {#exr-tarea1_4}
$g(x)= e^x-a$ donde $a=1, 3, 5$.

```{python}

g1 = lambda x: np.exp(x)-1 
g3 = lambda x: np.exp(x)-3
g5 = lambda x: np.exp(x)-5

x = np.linspace(-0.5, 2, 200)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x,g1(x), label = "a1", color ="yellow") 
plt.plot(x,g3(x), label = "a3", color ="magenta")
plt.plot(x,g5(x), label = "a5", color ="red")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $f(x)= e^x-a $", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Aproximacion de la raíz cuando a=1

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g1, -0.25, 0.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g1, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g1, x0 = -0.5, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

Raiz cuando a= 3

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g3, 1, 1.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g3, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g3, x0 = 1, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
:::
```

Raiz cuando a= 5

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g5, 1.5, 2, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g5, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g5, x0 = 1.5, x1= 2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
:::
```

::: {#exr-tarea1_5}
$g(x)= e^x-log(x+1) -b$ donde $b=2, 3, 5$.
:::

```{python}
g2 = lambda x: np.exp(x)- np.log(x+1) -2   
g3 = lambda x: np.exp(x)- np.log(x+1)-3
g5 = lambda x: np.exp(x)- np.log(x+1)-5

x = np.linspace(-0.5, 2, 200)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x ,g2(x), label = "b2") 
plt.plot(x ,g3(x), label = "b3")
plt.plot(x ,g5(x), label = "b5")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $g(x)= e^x-log(x+1) -b $", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Aproximacion de la raíz cuando b=2

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g2, 0.5, 1, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x) -1/(x+1)

root_newton, info_newton = optimize.newton(g2, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g2, x0 = 0.5, x1= 1, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

Raiz cuando b= 3

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g3, 1, 1.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x)- 1/(x+1)

root_newton, info_newton = optimize.newton(g3, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g3, x0 = 1, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
:::
```

Raiz cuando b= 5

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(g5, 1.5, 2, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
g_der = lambda x: np.exp(x)-1/(x+1)

root_newton, info_newton = optimize.newton(g5, 1, g_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(g5, x0 = 1.5, x1= 2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
:::
```

::: {#exr-tarea1_6}
$f(x)= \sqrt{x}-sen(x) -c$ donde $c=1,\pi$.
:::

```{python}
f1 = lambda x: np.sqrt(x) -np.sin(x)- 1   
f3 = lambda x: np.sqrt(x) -np.sin(x)- np.pi 


x = np.linspace(2, 8, 200)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x ,f1(x), label = "c1") 
plt.plot(x ,f3(x), label = "c3")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráfica de la función $f(x)= \sqrt{x}-sen(x) -c  $", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Aproximacion de la raíz cuando c=1

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(f1, 2, 3, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
f_der = lambda x: (1/ (2*np.sqrt(x))) -np.cos(x)
 
root_newton, info_newton = optimize.newton(f1, 1.5, f_der, full_output = True)
print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(f1, x0 = 2, x1= 3, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

Raiz cuando c= pi

Metodo de biseccion

```{python}
root_biseccion, info_biseccion = optimize.bisect(f3, 4, 5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método de Newton Raphson

```{python}
f_der = lambda x: (1/ (2*np.sqrt(x))) -np.cos(x)

raiz_newton, info_newton = optimize.bisect(f3,4,5, full_output=True)
print("información convergencia método de Newton  raiz")
print(info_newton)
print("-----------------")
print(f"La  raiz es {raiz_newton}")
```

Método de la secante

```{python}
root_secante, info_secante = optimize.newton(f3, x0 = 4, x1= 5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

```{python}
round(root_biseccion,10) == round(raiz_newton, 10)
```

```{python}
round(root_secante,10) == round(raiz_newton, 10)
:::
```

::: {#exr-tarea1_7}
El sistema de ecuaciones no lineales:

\begin{eqnarray}
y^2 - x^2 + 4x - 2 &=& 0\\
x^2 +3y^2 - 4 &=& 0\\
\end{eqnarray}

tiene dos soluciones. Realiza una gráfica de las curvas de nivel y aproxima las soluciones con la función `fsolve`.
:::

Graficas curvas de nivel

```{python}
f1 = lambda x: np.sqrt(x**2 -4*x+2) 
f2 = lambda x: - f1(x)
g1 = lambda x: np.sqrt((-x**2+4)/3)
g2 = lambda x: -g1(x)

x = np.linspace(-2, 2, 500)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráficas de las curvas de nivel", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

Aproximamos la solución del sistema (los puntos de intersección de las curvas de nivel)

```{python}
def sistema(variables): # variables debe ser una lista de dos elementos
  x, y = variables
  return [y ** 2 - x ** 2 + 4*x -2, x**2+3* y ** 2 -4]

solucion_1 = optimize.fsolve(sistema, x0=[0.5,1])
solucion_2 = optimize.fsolve(sistema, x0=[0.5,-1])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) y ({round(solucion_2[0], 4)}, {round(solucion_2[1], 4)})")

```

```{python}
#| code-fold: true
#| fig-align: "center"

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "darkorange")
plt.plot(solucion_2[0], solucion_2[1], marker = 'o', ms=8, color= "darkorange")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```

::: {#exr-tarea1_8}
Considera el siguiente sistema:

\begin{eqnarray}
sen(x) + y^2 - 1 &=& 0\\
x + cos(y) - 1 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.
:::

```{python}
f1 = lambda x: np.sqrt(1-np.sin(x))
f2 = lambda x: - f1(x)
g1 = lambda x: np.arccos(1-x)
g2 = lambda x: -g1(x)

x = np.linspace(0, 2, 500)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráficas de las curvas de nivel", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

```{python}
def sistema(variables): # variables debe ser una lista de dos elementos
  x, y = variables
  return [np.sin(x)+y**2 -1, x + np.cos(y) -1]

solucion_1 = optimize.fsolve(sistema, x0=[0.5,1])
solucion_2 = optimize.fsolve(sistema, x0=[0.5,-1])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) y ({round(solucion_2[0], 4)}, {round(solucion_2[1], 4)})")
```

```{python}
#| code-fold: true
#| fig-align: "center"

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "darkorange")
plt.plot(solucion_2[0], solucion_2[1], marker = 'o', ms=8, color= "darkorange")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```

::: {#exr-tarea1_9}
Para el siguiente sistema de ecuaciones no lineal:

\begin{eqnarray}
x^3 + y - 6 &=& 0\\
y^3 -x - 4 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.
:::

```{python}
f1 = lambda x: 6- x**3
g1 = lambda x: (x+4)**(1/3)


x = np.linspace(0, 2, 500)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 

plt.plot(x, g1(x), label = "g1")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráficas de las curvas de nivel", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

```{python}
def sistema(variables): # variables debe ser una lista de dos elementos
  x, y = variables
  return [x**3 +y-6, y**3 -x -4]

solucion_1 = optimize.fsolve(sistema, x0=[1.6,2])

print(f"Las solucion del sistema es: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) ")

```

```{python}
#| code-fold: true
#| fig-align: "center"

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 

plt.plot(x, g1(x), label = "g1")

plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "darkorange")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```

::: {#exr-tarea1_10}
Consideraremos un sistema de ecuaciones no lineal para describir un modelo de equilibrio económico.

1.  Curva de demanda no lineal

\begin{equation}
q_d = 200 - 10 p^2
\end{equation}

2.  Curva de oferta no lineal

\begin{equation}
q_s = 5 p^3 + 15
\end{equation}

El equilibrio ocurre cuando

\begin{equation}
q_s = q_d
\end{equation}

O bien

\begin{eqnarray}
q + 10p^2 -200  &=& 0\\
q - 5p^3 - 15 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas y aproxima el punto de equilibrio con la función `fsolve`.

```{python}
f1 = lambda x: 200 -10*x**2
g1 = lambda x: 5*x**3 +15


x = np.linspace(0, 4, 500)


# Crear gráfica
plt.figure(figsize=(8,6)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 

plt.plot(x, g1(x), label = "g1")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.title(r"Gráficas de las curvas de nivel", fontsize= 14)
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

```{python}
def sistema(variables): # variables debe ser una lista de dos elementos
  x, y = variables
  return [y + 10*x**2 -200, y-5*x**3 -15]

solucion_1 = optimize.fsolve(sistema, x0=[1.6,2])

print(f"Las solucion del sistema es: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) ")
```

```{python}
#| code-fold: true
#| fig-align: "center"

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 

plt.plot(x, g1(x), label = "g1")

plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "darkorange")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```
:::
:::::::::
